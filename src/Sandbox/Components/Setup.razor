@inherits NetworkComponentBase

@inject NetworkManager NetworkManager

<Stack ClassName="w-fit border p-5 m-2">
    <TextBox Placeholder="Pseudo" @bind-Value="Pseudo"/>
    <Separator ClassName="my-1"/>
    <Stack Horizontal="true">
        <TextBox Placeholder="Address" ClassName="grow" @bind-Value="_address"/>
        <Separator ClassName="mr-1"/>
        <TextBox Placeholder="Port" ClassName="w-1/4" @bind-Value="_port"/>
    </Stack>
    <Separator ClassName="my-2 border-t border-gray-400"/>
    <Stack Horizontal="true">
        <PrimaryButton Text="Start Server" Icon="Server" ClassName="w-full" OnClick="StartServer"
                       Disabled="IsServerRunning || IsClientStarted"/>
        <Separator ClassName="mx-1"/>
        <PrimaryButton Text="Start Client" Icon="ConnectContacts" ClassName="w-full" OnClick="StartClient"
                       Disabled="IsClientRunning"/>
    </Stack>
    <Separator ClassName="my-1"/>
    <DefaultButton Text="Disconnect" Icon="ReturnKey" OnClick="Disconnect"
                   Enabled="IsServerRunning || IsClientRunning"/>
</Stack>

@code {
    public static string Pseudo { get; private set; } = null!;

    private string _address = NetworkManager.LocalAddress;
    private string _port = NetworkManager.DefaultPort.ToString();

    private bool IsServerRunning => NetworkManager.ServerManager.IsRunning;
    private bool IsClientRunning => NetworkManager.ClientManager.IsRunning;
    private bool IsClientStarted => NetworkManager.ClientManager.IsStarted;

    private int? GetPort()
    {
        if (int.TryParse(_port, out var result))
        {
            return result;
        }

        return null;
    }

    private void StartServer()
    {
        NetworkManager.StartServer(GetPort());
    }

    private void StartClient()
    {
        NetworkManager.StartClient(_address, GetPort());
    }

    private void Disconnect()
    {
        NetworkManager.StopClient();
        NetworkManager.StopServer();
    }

    private void OnServerConnectionStateChanged(ConnectionState state)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnClientConnectionStateChanged(ConnectionState state)
    {
        InvokeAsync(StateHasChanged);
    }

}